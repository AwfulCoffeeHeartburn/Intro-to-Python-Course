import pickle
from Contact import *

def load_contacts():
    try:
        with open("mydata.dat", "rb") as file:
            #File exists, pickled dictionary exists in it.
            return_dictionary = pickle.load(file)
            return return_dictionary
    except:
        return {}


def save_contacts(contacts):
    with open("mydata.dat", "wb") as file:
        pickle.dump(contacts, file)

def add(contacts):
    name = input("Enter the contacts's name.")
    phone = []
    next_num = 0
    while next_num != 'q':
        next_num = input("Enter a phone number or q to stop.")
        if next_num != 'q':
            phone.append(next_num)

    email = input("Please enter the contact's email.")
    contacts[name] = Contact(name, phone, email)

def look_up(contacts):
    name = input("What is the name of the contact?")
    if name in contacts:
        print(contacts[name])
    else:
        print("Contact does not exist")

def delete(contacts):
    name = input("What is the name of the contact you'd like to delete?")
    if name in contacts:
        contacts.pop(name)
        print("Contact has been removed.")
    else:
        print("Contact does not exist.")

def change(contacts):
    phone = []
    name = input("What is the name of the contact you'd like to edit?")
    if name in contacts:
        choice = 0
        while True:
            choice = int(input("What would you like to do? 1 to remove a phone number, "
                           "2 to add a phone number,"
                           "3 to change the email address,"
                           "4 to change their name."
                            "5 to quit."))
            if choice == 1:
                dead_num = int(input("What is the number you'd like to remove?"))
                #if dead_num in
                #name.remove_num(dead_num)
            elif choice == 2:
                next_num = 0
                while next_num != 'q':
                    next_num = input("Enter a phone number or q to stop.")
                    if next_num != 'q':
                        contacts[name] = name(name, phone, email)
            elif choice == 3:
                pass
            elif choice == 4:
                pass
            elif choice == 5:
                break

def main():
    contacts = load_contacts()

    choice = 0
    while True:  # Ask the user what to do next
        choice = int(input("Enter a choice: 1 to add, 2 to look up, 3 to delete, 4 to change, 5 to quit."))
        if choice == 1:
            add(contacts)
        elif choice == 2:
            look_up(contacts)
        elif choice == 3:
            delete(contacts)
        elif choice == 4:
            change(contacts)
        elif choice == 5:
            break
        else:
            print("Invalid choice!")

    save_contacts(contacts)



main()

# Code for class object

class Contact:
    #A contact object contains info about a contact in a phonebook
    #Name - a string representing a contacts name
    #Phone: Lists representing a contact's phone numbers
    #Email: A string representing a contacts email

    def __init__(self, name, phone, email):
        self._name = name

        if type(phone) is not list:
            raise ValueError("Phone numbers must be a list of values.")
        self._phone = phone
        self._email = email

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def email(self):
        return self._email

    @email.setter
    def email(self, email):
        self._email = email

    @property
    def phone(self):
        return self._phone

    def add_num(self, new_num):
        if new_num not in self._phone:
            self._phone.append(new_num)

    def remove_num(self, dead_num):
        if dead_num in self._phone:
            self._phone.remove(dead_num)

    def __str__(self):
        return_string = "Name: " + self._name + "\n"
        return_string += "Numbers: "
        for num in self._phone:
            return_string += num + " "
        return_string += "\n"
        return_string += "Email: " + self._email
        return return_string


